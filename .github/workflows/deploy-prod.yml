name: JFrog CLI GitHub Actions NPM

on:
  push:
    branches:
      - master

jobs:
  Dependabot-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Dependabot alerts validation
        uses: octokit/graphql-action@v2.x
        id: get_security_vulnerabilities
        with:
          query: |
            query alerts($owner:String!,$repo:String!) {
              repository(owner:$owner,name:$repo) {
                vulnerabilityAlerts(last:100) {
                  totalCount,
                  nodes {
                    securityVulnerability{
                      severity,
                    }
                  }
                }
              }
            }
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GRAPHQL_GITHUB_TOKEN }}
      - name: Failuer of dependabot validation
        if : ${{ fromJSON(steps.get_security_vulnerabilities.outputs.data).repository.vulnerabilityAlerts.totalCount != 0 }}
        run: echo NG
      - name: Sucsess of dependabot validation
        run: echo OK

  Xray-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: master
      - uses: actions/setup-node@v1
      - name: XRAY validation
        run: node .security/xray.js
        env:
          XRAY_USER_NAME: ${{secrets.XRAY_USER_NAME}}
          XRAY_USER_API_KEY: ${{secrets.XRAY_USER_API_KEY}}

  build:
    name: Build Node.js app and Upload it to Artifactory
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup jfrog cli
        uses: jfrog/setup-jfrog-cli@v1
        env:
          JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_SECRET_1 }}

      - name: Run npm install, build
        run: |        
          jfrog rt npmci ga-npm
          npm run build
          jfrog rt u "public/" ga-generic/public/

      - name: Run npm publish, build publish, build scan
        run: |
          jfrog rt bce
          jfrog rt npmp ga-npm
          jfrog rt bp
          jfrog rt bs

  deploy:
    name: Deploy Node.js app to AWS
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup jfrog cli
        uses: jfrog/setup-jfrog-cli@v1
        env:
          JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_SECRET_1 }}

      - name: Download built artifact
        run:
          jfrog rt dl ga-generic/public/

  #    - name: Deploy to AWS
  #      uses:  github/deploy-nodejs@master
  #      env:
  #        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  #        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

  # Build-and-Push-Docker-Image:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   name: Docker Build, Tag, Push
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v1

  #     - name: Download built artifact
  #       uses: actions/download-artifact@master
  #       with:
  #         name: webpack artifacts
  #         path: public

  #     - name: Build, Tag, Push
  #       uses: mattdavis0351/actions/docker-gpr@v1
  #       with:
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
  #         image-name: tsuyo-aws-ttt
